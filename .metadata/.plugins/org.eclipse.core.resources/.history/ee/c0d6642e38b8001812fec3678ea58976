package com.hit.util;

import java.awt.List;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Scanner;

import com.hit.server.Server;

public class CLI extends Observable implements Runnable {

	private class User {
		String Name;
		Integer ID;
		String Status;

		public User(String name, int id, String status) {
			this.Name = name;
			this.ID = id;
			this.Status = status;
		}
	}

	private static final int LENGTH = 2;
	private static final String START = "start";
	private static final String SHUTDOWN = "shutdown";

	private static int COUNTER = 1;

	private Scanner scan;
	private OutputStream out;
	private String[] legalOperations;
	private PropertyChangeSupport support;
	private InetAddress address;
	private ArrayList<User> usersList = new ArrayList<User>();

	public CLI(InputStream in, OutputStream out) {
		try {
			scan = new Scanner(in);
			this.out = out;
			this.legalOperations = new String[LENGTH];
			this.address = InetAddress.getLocalHost();
			support = new PropertyChangeSupport(this);
			legalOperations[0] = START;
			legalOperations[1] = SHUTDOWN;
			write("Hello, legal operations are: ");
			for (int i = 0; i < LENGTH; i++) {
				write(legalOperations[i] + ", ");
			}
			System.out.println();
		} catch (Exception e) {
			System.out.println("Error");
		}
	}

	public void addPropertyChangeListener(PropertyChangeListener pcl) {
		support.addPropertyChangeListener(pcl);
		listener.add(pcl);
	}

	public void removePropertyChangeListener(PropertyChangeListener pcl) {
		support.removePropertyChangeListener(pcl);
	}

	public void write(String string) {
		try {
			out.write(string.getBytes());
		} catch (IOException e) {
			System.out.println("Error, CLI Cannot write");
		}
	}

	@Override
	public void run() {
		while (true) {
			String tempString = null;
			write("Please enter your command: ");
			tempString = scan.next();
			if (isLegalOperation(tempString)) {
				if (!tempString.equals(SHUTDOWN)) {
					try {
						if (tempString.equals(START)) {
							User user = new User("user" + Integer.toString(COUNTER), COUNTER, "start");
							COUNTER++;
							Socket mySocket = new Socket(address, 12345);
							for (PropertyChangeListener listener : listener) {
								if (listener instanceof Server) {
									support.firePropertyChange(user.Name + Integer.toString(COUNTER), "not exist",
											tempString);
									new Thread((Server) listener).start();
								}
							}
							write("Strarting server...\n");
						}
					} catch (Exception e) {
						System.out.println("Failed to start\n");
					}
				} else {
					System.exit(0);
					write("Thank you\n");
				}
			} else {
				write("Not valid command\n");
			}
		}
	}

	private boolean isLegalOperation(String operation) {
		boolean isLegal = false;
		for (String legal : legalOperations) {
			if (operation.equals(legal)) {
				isLegal = true;
				break;
			}
		}
		return isLegal;
	}
}
