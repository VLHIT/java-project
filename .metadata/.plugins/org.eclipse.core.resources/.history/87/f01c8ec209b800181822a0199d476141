package com.hit.util;

import java.awt.List;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Scanner;

public class CLI extends Observable implements Runnable {
	private static final int LENGTH = 2;
	private static final String START = "start";
	private static final String SHUTDOWN = "shutdown";

	private static boolean started = false;

	private Scanner scan;
	private OutputStream out;
	private String[] legalOperations;
	private PropertyChangeSupport support;
	//private InetAddress address;
	//private Socket mySocket;
	private ArrayList<PropertyChangeListener> listener = new ArrayList<PropertyChangeListener>();

	public CLI(InputStream in, OutputStream out) {
		try {
			scan = new Scanner(in);
			this.out = out;
			this.legalOperations = new String[LENGTH];
			//this.address = InetAddress.getLocalHost();
			support = new PropertyChangeSupport(this);
			legalOperations[0] = START;
			legalOperations[1] = SHUTDOWN;
			write("Hello, legal operations are: ");
			for (int i = 0; i < LENGTH; i++) {
				write(legalOperations[i] + ", ");
			}
			System.out.println();
		} catch (UnknownHostException ex) {
			System.out.println("unknown host exception");
		} catch (IOException e) {
			System.out.println("IO exception");
		}
	}

	public void addPropertyChangeListener(PropertyChangeListener pcl) {
		support.addPropertyChangeListener(pcl);
		listener.add(pcl);
	}

	public void removePropertyChangeListener(PropertyChangeListener pcl) {
		support.removePropertyChangeListener(pcl);
	}

	public void write(String string) {
		try {
			out.write(string.getBytes());
		} catch (IOException e) {
			System.out.println("Error, CLI Cannot write");
		}
	}

	@Override
	public void run() {
		///while (true) {
			String tempString = null;
			write("Please enter your command: ");
			tempString = scan.next();
			if (isLegalOperation(tempString) && !tempString.equals(SHUTDOWN) && !started) {
				try {
					if (tempString.equals(START)) {
						started = true;
						write("Strarting server...\n");
						support.getPropertyChangeListeners();
						support.firePropertyChange(tempString, 0, START);
						
					}
					if (tempString.equals(SHUTDOWN)) {
						support.notifyAll();
						System.exit(0);
						write("Thank you\n");
					}
				} catch (Exception e) {
					System.out.println("Failed to start");
				}
			///}
		}
	}

	private boolean isLegalOperation(String operation) {
		boolean isLegal = false;
		for (String legal : legalOperations) {
			if (operation.equals(legal)) {
				isLegal = true;
				break;
			}
		}
		return isLegal;
	}
	
	 private void notifyListeners(Object object, String property, String oldValue, String newValue) {
	        for (PropertyChangeListener name : listener) {
	            name.propertyChange(new PropertyChangeEvent(this, property, oldValue, newValue));
	        }
	    }
}
